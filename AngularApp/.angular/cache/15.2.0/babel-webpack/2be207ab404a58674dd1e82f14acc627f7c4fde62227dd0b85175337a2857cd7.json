{"ast":null,"code":"import { StoresService } from '../shared/stores.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/stores.service\";\nexport class StoresComponent {\n  constructor(storesService) {\n    this.storesService = storesService;\n  }\n  resetForm(form) {\n    if (form) form.reset();\n    this.storesService.selectedStores = {\n      _id: \"\",\n      name: \"\",\n      type: \"\",\n      city: \"\",\n      phone: null\n    };\n  }\n  onSubmit(form) {\n    if (form.value._id == \"\") {\n      this.storesService.postStores(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({\n          html: 'Saved successfully',\n          classes: 'rounded'\n        });\n      });\n    } else {\n      this.storesService.putStores(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({\n          html: 'Updated successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n  refreshEmployeeList() {\n    this.storesService.getStoresList().subscribe(res => {\n      this.storesService.stores = res;\n    });\n  }\n  onEdit(emp) {\n    this.storesService.selectedStores = emp;\n  }\n  onDelete(_id, form) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.storesService.deleteStores(_id).subscribe(res => {\n        this.refreshEmployeeList();\n        this.resetForm(form);\n        M.toast({\n          html: 'Deleted successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n}\nStoresComponent.ɵfac = function StoresComponent_Factory(t) {\n  return new (t || StoresComponent)(i0.ɵɵdirectiveInject(i1.StoresService));\n};\nStoresComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: StoresComponent,\n  selectors: [[\"app-stores\"]],\n  features: [i0.ɵɵProvidersFeature([StoresService])],\n  decls: 14,\n  vars: 0,\n  consts: [[1, \"row\"], [1, \"col\", \"s12\", \"m6\"], [1, \"card\", \"blue-grey\", \"darken-1\"], [1, \"card-content\", \"white-text\"], [1, \"card-title\"], [1, \"card-action\"], [\"href\", \"#\"]],\n  template: function StoresComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"span\", 4);\n      i0.ɵɵtext(5, \"Open Ended Lab\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\");\n      i0.ɵɵtext(7, \" A Simple CRUD Web Application\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"a\", 6);\n      i0.ɵɵtext(10, \"This is a link\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 6);\n      i0.ɵɵtext(12, \"This is a link\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtext(13, \">\\n\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAASA,aAAa,QAAQ,0BAA0B;;;AAWxD,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAmB;EAEpDC,SAAS,CAACC,IAAa;IACrB,IAAIA,IAAI,EACNA,IAAI,CAACC,KAAK,EAAE;IACd,IAAI,CAACH,aAAa,CAACI,cAAc,GAAG;MAClCC,GAAG,EAAE,EAAE;MACPC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE;KACR;EACH;EAEAC,QAAQ,CAACR,IAAY;IACnB,IAAIA,IAAI,CAACS,KAAK,CAACN,GAAG,IAAI,EAAE,EAAE;MACxB,IAAI,CAACL,aAAa,CAACY,UAAU,CAACV,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QAC1D,IAAI,CAACb,SAAS,CAACC,IAAI,CAAC;QACpB,IAAI,CAACa,mBAAmB,EAAE;QAC1BC,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,oBAAoB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC7D,CAAC,CAAC;KACH,MACI;MACH,IAAI,CAACnB,aAAa,CAACoB,SAAS,CAAClB,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QACzD,IAAI,CAACb,SAAS,CAACC,IAAI,CAAC;QACpB,IAAI,CAACa,mBAAmB,EAAE;QAC1BC,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;EAEAJ,mBAAmB;IACjB,IAAI,CAACf,aAAa,CAACqB,aAAa,EAAE,CAACR,SAAS,CAAEC,GAAG,IAAI;MACnD,IAAI,CAACd,aAAa,CAACsB,MAAM,GAAGR,GAAe;IAC7C,CAAC,CAAC;EACJ;EAEAS,MAAM,CAACC,GAAW;IAChB,IAAI,CAACxB,aAAa,CAACI,cAAc,GAAGoB,GAAG;EACzC;EAEAC,QAAQ,CAACpB,GAAW,EAAEH,IAAY;IAChC,IAAIwB,OAAO,CAAC,sCAAsC,CAAC,IAAI,IAAI,EAAE;MAC3D,IAAI,CAAC1B,aAAa,CAAC2B,YAAY,CAACtB,GAAG,CAAC,CAACQ,SAAS,CAAEC,GAAG,IAAI;QACrD,IAAI,CAACC,mBAAmB,EAAE;QAC1B,IAAI,CAACd,SAAS,CAACC,IAAI,CAAC;QACpBc,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;;AAnDWrB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAA8B;EAAAC,iCAFf,CAAChC,aAAa,CAAC;EAAAiC;EAAAC;EAAAC;EAAAC;IAAA;MCZ5BC,8BAAiB;MAIkBA,8BAAc;MAAAA,iBAAO;MAC9CA,yBAAG;MAACA,8CAA6B;MAAAA,iBAAI;MAEvCA,8BAAyB;MACXA,+BAAc;MAAAA,iBAAI;MAC9BA,6BAAY;MAAAA,+BAAc;MAAAA,iBAAI;MAIhCA,oBACR","names":["StoresService","StoresComponent","constructor","storesService","resetForm","form","reset","selectedStores","_id","name","type","city","phone","onSubmit","value","postStores","subscribe","res","refreshEmployeeList","M","toast","html","classes","putStores","getStoresList","stores","onEdit","emp","onDelete","confirm","deleteStores","selectors","features","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["D:\\uni work\\semester 8\\WebTech\\OEL\\AngularApp\\src\\app\\stores\\stores.component.ts","D:\\uni work\\semester 8\\WebTech\\OEL\\AngularApp\\src\\app\\stores\\stores.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { StoresService } from '../shared/stores.service';\nimport { Stores } from '../shared/stores.model';\n\ndeclare var M: any;\n\n@Component({\n  selector: 'app-stores',\n  templateUrl: './stores.component.html',\n  styleUrls: ['./stores.component.css'],\n  providers: [StoresService]\n})\nexport class StoresComponent {\n\n  constructor(private storesService: StoresService) { }\n\n  resetForm(form?: NgForm) {\n    if (form)\n      form.reset();\n    this.storesService.selectedStores = {\n      _id: \"\",\n      name: \"\",\n      type: \"\",\n      city: \"\",\n      phone: null\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.value._id == \"\") {\n      this.storesService.postStores(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({ html: 'Saved successfully', classes: 'rounded' });\n      });\n    }\n    else {\n      this.storesService.putStores(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({ html: 'Updated successfully', classes: 'rounded' });\n      });\n    }\n  }\n\n  refreshEmployeeList() {\n    this.storesService.getStoresList().subscribe((res) => {\n      this.storesService.stores = res as Stores[];\n    });\n  }\n\n  onEdit(emp: Stores) {\n    this.storesService.selectedStores = emp;\n  }\n\n  onDelete(_id: string, form: NgForm) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.storesService.deleteStores(_id).subscribe((res) => {\n        this.refreshEmployeeList();\n        this.resetForm(form);\n        M.toast({ html: 'Deleted successfully', classes: 'rounded' });\n      });\n    }\n  }\n\n}","<div class=\"row\">\n    <div class=\"col s12 m6\">\n      <div class=\"card blue-grey darken-1\">\n        <div class=\"card-content white-text\">\n          <span class=\"card-title\">Open Ended Lab</span>\n          <p> A Simple CRUD Web Application</p>\n        </div>\n        <div class=\"card-action\">\n          <a href=\"#\">This is a link</a>\n          <a href=\"#\">This is a link</a>\n        </div>\n      </div>\n    </div>\n  </div>>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}